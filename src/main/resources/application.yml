application:
  name: familie-ef-personhendelse
server:
  servlet:
    context-path: /
spring:
  application:
    name: familie-ef-personhendelse
  jackson:
    mapper:
      accept-case-insensitive-properties: true
    deserialization:
      accept-single-value-as-array: true
      fail-on-unknown-properties: true
    serialization:
      write-empty-json-arrays: false
      fail-on-empty-beans: false
  main:
    allow-bean-definition-overriding: true
  kafka:
    client-id: familie-ef-personhendelse
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    properties:
      schema.registry.url: ${KAFKA_SCHEMA_REGISTRY_URL}
      security.protocol: SASL_SSL
      specific.avro.reader: true
      sasl:
        mechanism: PLAIN
        jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="${SRV_CREDENTIAL_USERNAME}" password="${SRV_CREDENTIAL_PASSWORD}";
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      group-id: srvfamilie-ef-person
      max-poll-records: 1
      auto-offset-reset: latest
      enable-auto-commit: false

no.nav.security.jwt:
  issuer:
    azuread:
      discoveryurl: ${AZURE_APP_WELL_KNOWN_URL}
      accepted_audience: ${AZURE_APP_CLIENT_ID}
  client:
    registration:
      integrasjoner-client-credentials:
        resource-url: ${FAMILIE_INTEGRASJONER_API_URL}
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: ${FAMILIE_INTEGRASJONER_SCOPE}
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-secret: ${AZURE_APP_CLIENT_SECRET}
          client-auth-method: client_secret_basic
      ef-sak-clientcredentials:
        resource-url: ${EF_SAK_URL}
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: ${EF_SAK_SCOPE}
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-secret: ${AZURE_APP_CLIENT_SECRET}
          client-auth-method: client_secret_basic
      ef-sak:
        resource-url: ${EF_SAK_URL}
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: urn:ietf:params:oauth:grant-type:jwt-bearer
        scope: ${EF_SAK_SCOPE}
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-secret: ${AZURE_APP_CLIENT_SECRET}
          client-auth-method: client_secret_basic

management:
  endpoint.health.show-details: always
  endpoints.web:
    exposure.include: info, health, metrics, prometheus, mappings
    base-path: "/internal"
    path-mapping:
      info: "isAlive"
  metrics.export.prometheus.enabled: true
  metrics.web.server.auto-time-requests: true

KAFKA_BOOTSTRAP_SERVERS: a01apvl00145.adeo.no:8443,a01apvl00146.adeo.no:8443,a01apvl00147.adeo.no:8443,a01apvl00148.adeo.no:8443,a01apvl00149.adeo.no:8443,a01apvl00150.adeo.no:8443
KAFKA_SCHEMA_REGISTRY_URL: http://kafka-schema-registry.tpa:8081

FAMILIE_INTEGRASJONER_API_URL: https://familie-integrasjoner.dev-fss-pub.nais.io
STS_URL: https://api-gw.oera.no/security-token-service
PDL_URL: https://pdl-api.prod-fss-pub.nais.io/graphql
PDL_SCOPE: api://prod-fss.pdl.pdl-api/.default
EF_SAK_URL: http://familie-ef-sak